#include <ros/ros.h>

#include <nav_msgs/Odometry.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/NavSatFix.h>

#include <tf/transform_datatypes.h>

#include <Eigen/Dense>

namespace RobotLocalization
{
  class NavSatTransform
  {
    public:
      NavSatTransform();
      ~NavSatTransform();
      void run();

    private:
//DEFINES THE ROLL_PITCH_YAW_AND_DIRECTION_ORIENTATION(magneticdeclination) OF BOT
      double magneticDeclination_;
      double utmOdomTfRoll_;
      double utmOdomTfPitch_;
      double utmOdomTfYaw_;

      //! @brief Whether or not the GPS fix is usable
      bool hasGps_;
      //! @brief Signifies that we have an odometry message
      bool hasOdom_;
      //! @brief Signifies that we have received an IMU message
      bool hasImu_;
      //! @brief Whether or not we've computed a good heading
      bool transformGood_;
      //! @brief Whether or not we have new GPS data
      //! We only want to compute and broadcast our transformed GPS
      //! data if it's new. This variable keeps track of that.
      bool gpsUpdated_;

//THESE ARE FOR OFFSET VALUES AND THEY GIVE THE OFFSET VALUE KEPT ON PARTICULAR POSITION WHERE THE ACTUAL VALUE IS ZERO.EG. ON GROUND
//ROLL IS ZERO BUT THERE MAY BE ROLL OFFSET.
//ROLL->X-AXIS//PITCH->Y-AXIS//YAW->Z-AXIS
      double rollOffset_;
      double pitchOffset_;
      double yawOffset_;

//TRUE IF 0 ALTITUDE ELSE FALSE => INTERPRETED FROM THE CONVERTED DATA FROM GPS SENSOR
      bool zeroAltitude_;

      //! @brief Frame ID of the GPS odometry output
      //!
      //! This will just match whatever your odometry message has
      //!
      std::string odomFrameId_;

      //! @brief Latest odometry data
      //!
      tf::Pose latestOdomPose_;

      //! @brief Latest GPS data, stored as UTM coords
      //!
      tf::Pose latestUtmPose_;

      //! @brief Latest IMU orientation
      //!
      tf::Quaternion latestOrientation_;

      //! @brief Covariane for most recent GPS/UTM data
      //!
      Eigen::MatrixXd latestUtmCovariance_;

      //! @brief Holds the UTM->odom transform
      //!
      tf::Transform utmOdomTransform_;

//DIFFERENT CALLBACK FUNCTIONS FOR RECEIVED DATA OF 1.ODOMETERY 2.GPS 3.IMU
      void odomCallback(const nav_msgs::OdometryConstPtr& msg);
      void gpsFixCallback(const sensor_msgs::NavSatFixConstPtr& msg);
      void imuCallback(const sensor_msgs::ImuConstPtr& msg);

      //! @brief Computes the transform from the UTM frame to the
      //! odom frame
      //!
      void computeTransform();

      //! @brief Prepares the GPS odometry message before sending
      //!
      bool prepareGpsOdometry(nav_msgs::Odometry &gpsOdom);
  };
}
